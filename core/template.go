package core
const IndexTemplate = `<!DOCTYPE html> <html lang="en"> <head> <meta charset="UTF-8"> <title>Branches Health</title> <script src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.6.1/angular.min.js" integrity="sha256-3SrLjPeRPa1ofM280r+OMcUjJZKLWJHr6SRtRu3dRb0=" crossorigin="anonymous"></script> <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.17.1/moment.min.js" integrity="sha256-Gn7MUQono8LUxTfRA0WZzJgTua52Udm1Ifrk5421zkA=" crossorigin="anonymous"></script> </head> <body> <div ng-app="branchesHealth" ng-controller="app as $ctrl" id="content"> <div class="block"> <h1>Statistics</h1> <table class="statistics"> <tr> <td> <div>Keep:</div> <div class="count">{{$ctrl.info.keep}}</div> <div ng-repeat="person in $ctrl.people | orderBy:'-keep'" ng-show="person.keep"> {{::person.name}} - {{::person.keep}} </div> </td> <td> <h4>Check:</h4> <div class="count">{{$ctrl.info.old}}</div> <div ng-repeat="person in $ctrl.people | orderBy:'-old'" ng-show="person.old"> {{::person.name}} - {{::person.old}} </div> </td> <td> <h4>Delete:</h4> <div class="count">{{$ctrl.info.toDelete}}</div> <div ng-repeat="person in $ctrl.people | orderBy:'-toDelete'" ng-show="person.toDelete"> {{::person.name}} - {{::person.toDelete}} </div> </td> </tr> </table> </div> <div class="block"> <h1> Branches <input type="text" ng-model="$ctrl.authorFilterField" class="filter-field" placeholder="filter by branch name, author, date"> </h1> <div ng-repeat="(repositoryName, branches) in $ctrl.repositories" ng-show="branchesFound.length"> <h2>{{::repositoryName}}</h2> <table class="branches"> <thead> <tr> <th class="branch-name">Branch name</th> <th class="changed-by">Last changed by</th> <th class="changed-time"></th> <th class="is-merged">Is merged?</th> <th class="is-outdated">Is outdated?</th> </tr> </thead> <tbody> <tr ng-repeat="branch in branches | filter:$ctrl.authorFilterField as branchesFound" ng-class="{'status-warn': branch.IsOutdated, 'status-bad': branch.IsMerged}"> <td>{{::branch.Name}}</td> <td>{{::branch.Author}}</td> <td>{{::branch.LastUpdated}}</td> <td>{{::branch.IsMerged ? 'yes' : 'no'}}</td> <td>{{::branch.IsOutdated ? 'yes' : 'no'}}</td> </tr> </tbody> </table> </div> </div> </div> </body> <script type="application/javascript"> angular.module("branchesHealth", []).controller("app", controller); function controller ($http, $scope) { this.authorFilterField = ''; this.repositories = []; this.info = { keep: 0, toDelete: 0, old: 0 }; this.people = []; this.leaderboard = { keep: [], toDelete: [], old: [] }; $http.get('/api/branches').then(response => { const branches = response.data.branches; const people = {}; branches.forEach(branch => { if (people[branch.Author] === undefined) { people[branch.Author] = { keep: 0, toDelete: 0, old: 0 }; } if (branch.IsMerged) { people[branch.Author].toDelete++; this.info.toDelete++; } else if (branch.IsOutdated) { people[branch.Author].old++; this.info.old++; } else { people[branch.Author].keep++; this.info.keep++; } }); Object.keys(people) .forEach(name => this.people.push(Object.assign({name}, people[name]))); }); $http.get('/api/repositories').then(response => { this.repositories = response.data; Object.keys(this.repositories).forEach(repositoryName => { this.repositories[repositoryName] = this.repositories[repositoryName] .map(branch => { branch.LastUpdatedMoment = moment(branch.LastUpdated); branch.LastUpdated = branch.LastUpdatedMoment.fromNow(); return branch; }) .sort((a, b) => { if (a.IsMerged && b.IsMerged) return a.LastUpdatedMoment - b.LastUpdatedMoment; return a.IsMerged ? (b.IsMerged ? 0 : -1) : 1; }) }) }) } </script> <style> /* http://meyerweb.com/eric/tools/css/reset/ v2.0 | 20110126 License: none (public domain) */ html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i, center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section, summary, time, mark, audio, video { margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: baseline; } /* HTML5 display-role reset for older browsers */ article, aside, details, figcaption, figure, footer, header, hgroup, menu, nav, section { display: block; } body { line-height: 1; } ol, ul { list-style: none; } blockquote, q { quotes: none; } blockquote:before, blockquote:after, q:before, q:after { content: ''; content: none; } table { border-collapse: collapse; border-spacing: 0; } </style> <style> body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"; line-height: 1.3; } h1 { font-size: 2em; font-weight: 600; padding-top: .25em; padding-bottom: .2em; } h2 { font-size: 1.5em; font-weight: 600; padding-top: .5em; padding-bottom: .2em; } table { width: 100%; } table tr th { text-align: left; padding-bottom: .5em; color: #a2a2a2; font-size: .8em; } table.statistics tr td { width: 33.3%; } table.branches { margin-bottom: 1em; } table.branches tr > * { padding: 0.1em 0.5em; line-height: 1.6; } th.branch-name {width: 30%;} th.changed-by {width: 30%;} th.changed-time {width: 20%;} th.is-merged {width: 10%;} th.is-outdated {width: 10%;} .status-bad { background-color: rgba(236, 100, 75, 0.5) !important; } .status-warn { background-color: rgba(245, 215, 110, 0.5); } .count { font-size: 3em; } #content { width: 100%; max-width: 960px; margin: 0 auto; } .block { margin-bottom: 2em; } .filter-field { font-size: 0.5em; border: 0; border-bottom: 0.1em solid black; padding: 0 0.2em; width: 30%; outline: none; opacity: 0.3; } .filter-field:focus { opacity: 1; } </style> </html>`
